if isdef("toolbox_minotaur") then
    error("Toolbox is already loaded. Please unload to proceed!");
end

verboseMode = ilib_verbose();
ilib_verbose(0);

TOOLBOX_NAME = "Minotaur_Toolbox";
TOOLBOX_TITLE = "Minotaur Toolbox";

if (isdef("minotaur_libs") <> %t) then
    minotaur_libs = [];
end

function [toolbox_minotaur, minotaur_libs] = startModule()

    mprintf("Start " + TOOLBOX_NAME + "\n");

    etc_tlbx  = get_absolute_file_path(TOOLBOX_NAME + ".start");
    etc_tlbx  = getshortpathname(etc_tlbx);
    root_tlbx = strncpy( etc_tlbx, length(etc_tlbx) - 5 );  // length("\etc\") = 5

    // Load Macros
    mprintf("\tLoad macros\n");
    pathmacros = pathconvert( root_tlbx ) + "macros" + filesep();
    toolbox_minotaur = lib(pathmacros);

    // Load Libraries
    mprintf("\tLoad Libraries\n");
    [a, opt] = getversion();
    ARCH = opt(2);
    if getos()=="Windows" then
        lib_path = root_tlbx + filesep() + "thirdparty" + filesep() + "windows" + filesep() + "lib" + filesep() + ARCH + filesep();
        minotaur_libs($+1) = link(lib_path + "libCoinUtils.dll");
        minotaur_libs($+1) = link(lib_path + "libOsi.dll");
        minotaur_libs($+1) = link(lib_path + "libClp.dll");
        minotaur_libs($+1) = link(lib_path + "libOsiClp.dll");
        minotaur_libs($+1) = link(lib_path + "libClpSolver.dll");
        minotaur_libs($+1) = link(lib_path + "libcoinmumps.dll");
        minotaur_libs($+1) = link(lib_path + "libipopt.dll");
        minotaur_libs($+1) = link(lib_path + "libminotaur.dll");
        minotaur_libs($+1) = link(lib_path + "libmntrosilp.dll");
        minotaur_libs($+1) = link(lib_path + "libmntripopt.dll");
        minotaur_libs($+1) = link(lib_path + "libmntrengfac.dll");
    else
        lib_path = root_tlbx + filesep() + "thirdparty" + filesep() + "linux" + filesep() + "lib" + filesep() + ARCH + filesep();
        minotaur_libs($+1) = link(lib_path + "libCoinUtils.so");
        minotaur_libs($+1) = link(lib_path + "libOsi.so");
        minotaur_libs($+1) = link(lib_path + "libClp.so");
        minotaur_libs($+1) = link(lib_path + "libOsiClp.so");
        minotaur_libs($+1) = link(lib_path + "libClpSolver.so");
        minotaur_libs($+1) = link(lib_path + "libcoinmumps.so");
        minotaur_libs($+1) = link(lib_path + "libipopt.so");
        minotaur_libs($+1) = link(lib_path + "libminotaur.so");
        minotaur_libs($+1) = link(lib_path + "libmntrosilp.so");
        minotaur_libs($+1) = link(lib_path + "libmntripopt.so");
        minotaur_libs($+1) = link(lib_path + "libmntrengfac.so");
    end

    // Load Gateway
    mprintf("\tLoad Gateway\n");
    exec(pathconvert(root_tlbx + filesep() + "sci_gateway" + filesep() + "loader_gateway.sce", %f));

    // Load and add help chapter
    // =============================================================================
    if or(getscilabmode() == ["NW";"STD"]) then
        mprintf("\tLoad help\n");
        path_addchapter = pathconvert(root_tlbx + filesep() + "jar");
        if ( isdir(path_addchapter) <> [] ) then
            add_help_chapter(TOOLBOX_NAME, path_addchapter, %F);
        end
    end

    // Load demos
    // =============================================================================
    if or(getscilabmode() == ["NW";"STD"]) then
        mprintf("\tLoad demos\n");
        pathdemos = pathconvert(root_tlbx + filesep() + "demos" + filesep() + TOOLBOX_NAME + ".dem.gateway.sce", %F, %T);
        add_demo(TOOLBOX_NAME, pathdemos);
    end

endfunction

toolbox_minotaur = startModule();

ilib_verbose(verboseMode);

clear startModule TOOLBOX_NAME TOOLBOX_TITLE verboseMode;
